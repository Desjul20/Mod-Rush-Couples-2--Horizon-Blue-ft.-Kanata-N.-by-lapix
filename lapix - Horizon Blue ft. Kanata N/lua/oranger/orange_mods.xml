<Layer Type="ActorFrame"><children>

    <Layer File="modhelpers" />
	<Layer File="easing" />
	<Layer
        Type="ActorFrame"
        OnCommand="%function(self)
            ---------------------------------------------------------
			---------DOCUMENTATION-----------------------------------
			---------------------------------------------------------
			
			--function perframe( beat, endBeat )
				--return true if the current beat is between 'beat' and 'endBeat'
			
			--function mod_shader(beat,key,which)
				--turn on shader key at specified beat (up to 10 keys available, defined by 'which' = 0-9
				
			--function mod_insert(beat,len,mod,len_or_end,pn)
				--insert mod into beat mods table
			--function mod_insert2(time,len,mod,len_or_end,pn)
				--insert mod into time mods table
			--function mod_ease(beat, len, start_strength, end_strength, mod, len_or_end, ease_type, pn, sustain, opt1, opt2)
				--insert mod into ease mods table
			--function mod_perframe(start, end, function(beat, deltatime))
				--insert function into perframe reader
				
			--function mod_message(beat,msg,persistent)
				--insert something into the actions table.
				--msg can also be a function. If string, a message gets broadcast at that beat
				--if 'persistent' is true, message will run even if editor starts at a beat past it
				
			--function mod_blacklist(t,n)
				--check if number n occurs in table t
				--useful for doing 'every beat EXCEPT the contents of t'
				
			--function simple_m0d(beat,strength,mult,mod)
			--function simple_m0d2(beat,strength,mult,mod,pn)
			--function simple_m0d3(beat,strength,duration,bpm,mod,pn)
				--activate mods at specific beat but also deactivate them
				
			--function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
				--alternates a mod back and forth before resetting to 0
				
			--function mod_spring(beat,strength,num,mod,pn)
				--like mod_wiggle, but springier
			
			--function mod_springt(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod that decreases based on how much time is left.
					--think doorstopper
			
			--function mod_springt2(time,strength,dur,mod,pn)
				--time-based per-frame alternating mod
			
			--function mod_spring_adjustable(beat,strength,num,period,mod,pn, first)
				--it's not very good
			
			--function mod_beat(beat,strength,pn)
				--turns on beat for the beat specified, at the desired strength	
			
			--function switcheroo_add(beat,which,speed,len,pn)
				--adds a column swap at the desired beat
			--[[	switcheroos = {normal = {0,0}, ldur = {0,0}, reset = {0,0},
					flip = {100,0}, rudl = {100,0}, invert = {0,100}, dlru = {0,100},
					ludr = {25,-75}, rdul = {75,75}, drlu = {25,125}, ulrd = {75,-125}, urld = {100,-100}}
			]]
			
			--function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
				--portable version of the effect from sugarkill X
			
			--function mod_bounce(beat,length,start,apex,mod,ease_type,pn)
			--function func_bounce(beat,length,start,apex,function,ease_type)
				--eases out from start to apex, then eases back in from apex to start
				--ease_type should be a string, i.e. 'Quad', 'Cubic', 'Circ'
			
			
			
			--function modulo(a, b)
				--returns the remainder when a is divided by b, works properly with negatives unlike math.mod
			
			--function randomXD(t)
				--returns a pseudo-random number between 0 and 1 seeded based on the given argument
				--returns 0.5 if t is 0 (useful sometimes!)
				
			---------------------------------------------------------
			--------END DOCUMENTATION--------------------------------
			---------------------------------------------------------
			local linear, inQuad, outQuad, inOutQuad, outInQuad, inCubic, outCubic, inOutCubic, outInCubic, inQuart, outQuart, inOutQuart, outInQuart, inQuint, outQuint, inOutQuint, outInQuint, inSine, outSine, inOutSine, outInSine, inExpo, outExpo, inOutExpo, outInExpo, inCirc, outCirc, inOutCirc, outInCirc, inElastic, outElastic, inOutElastic, outInElastic, inBack, outBack, inOutBack, outInBack, inBounce, outBounce, inOutBounce, outInBounce = ease.linear, ease.inQuad, ease.outQuad, ease.inOutQuad, ease.outInQuad, ease.inCubic, ease.outCubic, ease.inOutCubic, ease.outInCubic, ease.inQuart, ease.outQuart, ease.inOutQuart, ease.outInQuart, ease.inQuint, ease.outQuint, ease.inOutQuint, ease.outInQuint, ease.inSine, ease.outSine, ease.inOutSine, ease.outInSine, ease.inExpo, ease.outExpo, ease.inOutExpo, ease.outInExpo, ease.inCirc, ease.outCirc, ease.inOutCirc, ease.outInCirc, ease.inElastic, ease.outElastic, ease.inOutElastic, ease.outInElastic, ease.inBack, ease.outBack, ease.inOutBack, ease.outInBack, ease.inBounce, ease.outBounce, ease.inOutBounce, ease.outInBounce 
		   
			local m = mod_insert
			local me = mod_ease
			local m2 = mod_message
			local mpf = mod_perframe
			
			--beat based mods
			--m(beat_start, beat_end, mods, len_or_end, player_number)
			
			--beat-based ease mods
			--me(beat_start, beat_end, mod_start, mod_end, mod/function, len_or_end, ease_type, player_number, sustainbeats, optional_param1, optional_param2)
			--valid ease types are:
				--linear
				--inQuad    outQuad    inOutQuad    outInQuad
				--inCubic   outCubic   inOutCubic   outInCubic
				--inQuart   outQuart   inOutQuart   outInQuart
				--inQuint   outQuint   inOutQuint   outInQuint
				--inSine    outSine    inOutSine    outInSine
				--inExpo    outExpo    inOutExpo    outInExpo
				--inCirc    outCirc    inOutCirc    outInCirc
				--inElastic outElastic inOutElastic outInElastic    --can take 2 optional parameters - amplitude & period
				--inBack    outBack    inOutBack    outInBack       --can take 1 optional parameter  - spring amount
				--inBounce  outBounce  inOutBounce  outInBounce
				
			--beat-based ease functions
			--me(beat_start, beat_end, mod_start, mod_end, mod_function, len_or_end, ease_type, sustainbeats, optional_param1, optional_param2)
			--mod_function gets passed a number as a parameter which can then be used to manipulate 
				
			-- you can now write perframe stuff without having to scroll down!
			-- mpf(beat_start,beat_end,function(beat,deltatime))
			
			--this is both a message broadcaster and a function runner
			--if you put mm(beat,'String') then 'String' is broadcast as a message on that beat
			--if you put mm(beat,function() somecode end) then function() is run at that beat
			--see example on beat 0
			--mm(beat,thing,persists)
			
			
            local function quickOn(beat,strength,len,md,pn)
			    local activation_rate = math.abs(strength/10)
			    m( beat-0.1,0.3,'*'..activation_rate..' '..strength..' '..md, 'len', pn )
				m( beat+0.1,len,'*'..((activation_rate/5)/len)..' 0 '..md, 'len', pn )
			end
            m2(0, function()
			   for pn = 1, 2 do
			    local a = Plr(pn)
			    if a then
			    a:linear(0.001)
				a:zoom(0.01)
			    a:x(sw/2)
			    end
				end
				P3 = SCREENMAN:GetTopScreen():GetChild('PlayerP3')
               if P3 then
            P3:hidden(0)
            P3:SetInputPlayer(1)
			P3:GetChild('Judgment'):hidden(1)
			P3:GetChild('Combo'):hidden(1)
			P3:zoom(1.2)
            end
			
			P4 = SCREENMAN:GetTopScreen():GetChild('PlayerP4')
               if P4 then
            P4:hidden(1)
            P4:SetInputPlayer(2)
			P4:GetChild('Judgment'):hidden(1)
			P4:GetChild('Combo'):hidden(1)
			P4:zoom(1.2)
            end
			 end, true)		
			 
			m2(2.5,function()
			   for pn = 1, 2 do
			    local a = Plr(pn)
			    if a then
			    a:accelerate(0.6)
				a:zoom(1.2)
			    end
				end
			 end, true)
			 
			m2(4,function()
			   for pn = 1, 2 do
			    local a = Plr(pn)
			    if a then
			    a:bounce(1)
				a:effectmagnitude(0,10,0)
				a:effectperiod(0.5)
			    end
				end
			 end, true)
			
			m2(29,function()
			   Plr(1):SetHiddenRegions({{31,36.1}})
			   Plr(2):SetHiddenRegions({{31,36.1}})
			end)
			m2(29,function()
			   SCREENMAN:GetTopScreen():GetChild('PlayerP3'):SetHiddenRegions({{29,31}})
			end)
			
			m2(4,function()
				SCREENMAN:GetTopScreen():GetChild('PlayerP3'):x(1600)
			end)
			
			m2(27,function()
			SCREENMAN:GetTopScreen():GetChild('PlayerP3'):x(800)
			SCREENMAN:GetTopScreen():GetChild('PlayerP3'):diffusealpha(0.5)
			SCREENMAN:GetTopScreen():GetChild('PlayerP3'):zoom(0.6)
			end)
			
			m2(29.5,function()
			SCREENMAN:GetTopScreen():GetChild('PlayerP3'):linear(3.5)
			SCREENMAN:GetTopScreen():GetChild('PlayerP3'):addx(-1000)
			end)
			
			m2(36,function()
			flash:accelerate(0.1)
			flash:diffusealpha(1)
			flash:accelerate(0.8)
			flash:diffusealpha(0)
			end)
			
			m2(36,function()
			gradient:accelerate(0.5)
			gradient:diffusealpha(0.5)
			end)
			
			m2(68,function()
			flash:diffusealpha(1)
			flash:accelerate(0.6)
			flash:diffusealpha(0)
			end)
			
			m2(36,function()
			blurizon:accelerate(0.1)
			blurizon:diffusealpha(1)
			end)
			
			m2(36,function()
			softifier:decelerate(0.4)
			softifier:diffusealpha(0.2)
			end)
			m(0,3,'*-1 stealth','len')
			m(0,68,'*-1 stealth','len',4)
			m(0,3,'*-1 dark','len',3)
			m(30,1,'*-1 30% dark','len',3)
			m(0,3,'*-1 dark','len',4)
			m(4,29,'*-1 80% stealth','len',3)
			m(29,4,'*1 no stealth','len',3)
			m(30.5,6,'*-1 30% stealth','len',3)
			m(36,20,'*-1 arrowpath','len')
			
			for i=31,36, 1 do
			quickOn(i,50,.5,'tipsy',3)
			quickOn(i,50,.5,'drunk',3)
			quickOn(i+1,-100*mod_value:getaux(),.5,'tipsy',3)
			quickOn(i+1,-100,.5,'drunk',3)
			end
			
			m2(68,function()
				blurizon:diffusealpha(0)
				gradient:accelerate(1.960)
				gradient:diffusealpha(0)
				for pn = 1, 2 do
			    local a = Plr(pn)
			    if a then
					a:stopeffect()
				end
				end
				--DO NOT CHANGE
				--this will hide the quadmash that stick to your screen if you don't hit it
				P4:hidden(0)
				P4:SetInputPlayer(2)
				P3:SetInputPlayer(2)
			end,true)
			
			mpf(36,68,function(beat)
			blurizon:rotationy( 5*math.sin(beat*math.pi) )
		    blurizon:rotationx( 5*math.sin(beat*math.pi) )
			end)
		   --update!
		   m2(68,function()
			horizon2:accelerate(0.1)
			horizon2:rotationx(60)
			horizon2:rotationz(180)
			horizon2:addy(sh/2)
			horizon2:diffusealpha(1)
			end)
			
			m2(68,function()
			horizon:accelerate(0.1)
			horizon:rotationx(-60)
			horizon:rotationz(0)
			horizon:addy(-sh/2)
			horizon:diffusealpha(1)
			end)
			
			m2(68,function()
			addrizon2:accelerate(0.1)
			addrizon2:rotationx(65)
			addrizon2:rotationz(180)
			addrizon2:addy(sh/2)
			addrizon2:diffusealpha(0.05)
			addrizon:customtexturerect(4,4,0,0)
			addrizon:texcoordvelocity(-0.15,-0.2)
			end)
			
			m2(68,function()
			addrizon:accelerate(0.1)
			addrizon:rotationx(-65)
			addrizon:rotationz(0)
			addrizon:addy(-sh/2)
			addrizon:diffusealpha(0.05)
			addrizon:customtexturerect(4,4,0,0)
			addrizon:texcoordvelocity(-0.15,-0.2)
			end)
			
			m2(68,function()
				for pn = 1, 2 do
			    local a = Plr(pn)
			    if a then
					a:accelerate(1.7)
					a:zoom(0)
				end
				end
				--this is, indeed, ok
				gradient2:accelerate(1.960)
				gradient2:diffusealpha(0)
				P4:hidden(0)
			end,true)
			
			m2(68,function()
			SCREENMAN:GetTopScreen():GetChild('PlayerP4'):hidden(0)
			SCREENMAN:GetTopScreen():GetChild('PlayerP4'):zoom(1)
			SCREENMAN:GetTopScreen():GetChild('PlayerP3'):x(SCREEN_CENTER_X)
			SCREENMAN:GetTopScreen():GetChild('PlayerP3'):zoom(0)
                        end)
			
		   --lfd-esque transition
			m(68,6,'*-1 no stealth','len',4)
			m(68,75.9,'*10000 49.9% Reverse,*10000 -2000% Bumpy,*10000 1200% Sudden,*10000 50% Mini, *1000 no flip, *1000 dark','end',4)
			m(68,75.9,'*10000 -92% SuddenOffset, *10000 C5.43, *1000 -200 brake','end',4)
			
			m2(74,function()
			SCREENMAN:GetTopScreen():GetChild('PlayerP4'):accelerate(0.8)
			SCREENMAN:GetTopScreen():GetChild('PlayerP4'):zoom(4)
			--change player 3 and 4 back
			P4:SetInputPlayer(1)
			P3:SetInputPlayer(0)
			end)
			
			m2(76,function()
				for pn = 1, 2 do
			    local a = Plr(pn)
			    if a then
					a:linear(2)
					a:zoom(0.9)
				end
				end
			end,true)
			
			m2(76,function()
			Plr(1):addx(sw/3)
			Plr(2):addx(-sw/3)
			end)
			
			m2(76.01,function()
			SCREENMAN:GetTopScreen():GetChild('PlayerP3'):linear(2)
			SCREENMAN:GetTopScreen():GetChild('PlayerP3'):zoom(0.9)
			SCREENMAN:GetTopScreen():GetChild('PlayerP4'):linear(2)
			SCREENMAN:GetTopScreen():GetChild('PlayerP4'):zoom(0)
			end)
			
			m2(76,function()
			flash:diffusealpha(1)
			flash:accelerate(0.3)
			flash:diffusealpha(0)
			end)
			
			m2(76,function()
			SCREENMAN:GetTopScreen():GetChild('PlayerP4'):zoom(0)
			end)
			
			m(76,1,'*-1 no stealth','len',3)
			m(76.2,1,'*-1 no bumpy','len',4)
			m(76.1,1,'*-1 clearall','len',4)
            m(76.1,1,'*-1 no sudden','len',4)
		   
		    m2(100,function()
			flash:diffusealpha(1)
			flash:accelerate(0.2)
			flash:diffusealpha(0)
			end)
			m2(100,function()
			for pn = 1, 2 do
			    local a = Plr(pn)
			    if a then
					a:x(SCREEN_CENTER_X)
					a:zoom(1)
				end
				end
			end,true)
			m2(100,function()
			SCREENMAN:GetTopScreen():GetChild('PlayerP3'):zoom(1)
			SCREENMAN:GetTopScreen():GetChild('PlayerP4'):zoom(1)
			end)
			m2(100,function()
			addrizon:diffusealpha(0.02)
			addrizon2:diffusealpha(0.02)
			end)
			
			m2(226,function()
			softifier:decelerate(0.2)
			softifier:diffuse(0,0,0,0.99)
			end)
			
			m2(227,function()
			softifier:accelerate(0.3)
			softifier:diffusealpha(0)
			end)
			
			m2(227,function()
			gradient:accelerate(0.3)
			gradient:diffuse(0,0,0,0.8)
            end)
			
			m2(227,function()
			gradient2:accelerate(0.3)
			gradient2:diffuse(0,0,0,0.8)
			end)
			
			m2(254,function()
			blurizon:diffusealpha(1)
			blurizon:zoom(0)
			blurizon:linear(2)
			blurizon:zoom(1)
			end)
			
			m2(227,function()
			horizon:diffusealpha(0)
			horizon2:diffusealpha(0)
			addrizon:diffusealpha(0)
			addrizon:stopeffect(1)
			addrizon2:diffusealpha(0)
			addrizon2:stopeffect(1)
			end)
			
			m2(260,function()
			flash:diffusealpha(1)
			flash:accelerate(0.3)
			flash:diffusealpha(0)
			end)
			m2(260,function()
			softifier:diffuse(0,0.5,2,0.5)
			gradient:diffuse(1,1,1,0.2)
			gradient2:diffuse(1,1,1,0.2)
			end)
			
			m2(260,function()
			addrizon:diffusealpha(0.2)
			addrizon:rotationx(0)
			end)
			
			m(291,4,'*1 no dark, *1 no halgun, *1 no hidenoteflash','len',4)
			m(291,4,'*1 no dark, *1 no halgun, *1 no hidenoteflash, *1 70% stealth, *1 no hide','len',3)
			me(291.5,2,0,100,'reverse','len',outExpo,4)
			me(291.5,2,0,220,'incoming','len',outExpo,4)
			me(291.5,2,0,175,'movey','len',outExpo,4)
			me(291.5,2,720,0,'rotationy','len',outExpo,4)
			me(293,100,100,100,'reverse','len',linear,4)
			me(293,100,220,220,'incoming','len',linear,4)
			me(293,100,175,175,'movey','len',linear,4)
			
			me(291.5,2,0,220,'incoming','len',outExpo,3)
			me(291.5,2,0,-150,'movey','len',outExpo,3)
			me(291.5,2,720,0,'rotationy','len',outExpo,3)
			me(293,100,220,220,'incoming','len',linear,3)
			me(293,100,-175,-175,'movey','len',linear,3)
			
			m2(290.9,function()
			horizon:diffusealpha(1)
			horizon2:diffusealpha(1)
			addrizon:rotationx(-65)
			addrizon:rotationz(0)
			addrizon:addy(-sh/2)
			addrizon2:diffusealpha(0.05)
			addrizon:diffusealpha(0.05)
			end)
			
			m2(291,function()
			blurizon:accelerate(0.5)
			blurizon:addy(sh/3)
			blurizon:rotationx(-65)
			blurizon:diffusealpha(0)
			end)
			
			m2(291,function()
			SCREENMAN:GetTopScreen():GetChild('PlayerP4'):wag(1)
			SCREENMAN:GetTopScreen():GetChild('PlayerP4'):effectmagnitude(0,10,0)
			SCREENMAN:GetTopScreen():GetChild('PlayerP3'):wag(1)
			SCREENMAN:GetTopScreen():GetChild('PlayerP3'):effectmagnitude(0,10,0)
			end)
			
			m2(324,function()
			flash:diffusealpha(1)
			flash:accelerate(0.3)
			flash:diffusealpha(0)
			end)

			m2(323.9,function()
			Plr(1):x(SCREEN_CENTER_X)
			Plr(2):x(SCREEN_CENTER_X)
			end)
			m2(324,function()
			Plr(1):addx(sw/3)
			Plr(2):addx(-sw/3)
			end)
			m2(324,function()
			blurizon:diffusealpha(1)
			blurizon:addy(-sh/3)
			blurizon:rotationx(0)
			end)
			m2(324,function()
			Plr(1):x(160)
			Plr(1):zoom(1)
			Plr(2):x(480)
			Plr(2):zoom(1)
			end)
			
			
			
			me(2.5,2.75,360,0,'rotationz','len',outCubic)
			me(3,1.5,100,0,'stealth','len',outCubic)
			me(28.5,0.5,0,30,'rotationy','len',outCubic,1)
			me(28.5,0.5,0,30,'rotationy','len',outCubic,2)
			me(28.5,0.5,0,30,'rotationy','len',outCubic,4)
			me(29,7,1110,0,'rotationy','len',outCubic,1)
			me(29,7,1110,0,'rotationy','len',outCubic,2)
			me(29,7,1110,0,'rotationy','len',outCubic,4)
			me(18,1,0,50,'movey','len',inOutElastic,1)
			me(18,1,0,-50,'movey','len',inOutElastic,2)
			me(19.5,2,360,0,'rotationx','len',outCubic)
			
			me(36,5,0,-200,'movex0','len',outExpo,1)
			me(36,5,0,-100,'movex0','len',outExpo,2)
			me(36,5,0,-100,'movex1','len',outExpo,1)
			me(36,5,0,100,'movex2','len',outExpo,1)
			me(36,5,0,200,'movex3','len',outExpo,1)
			me(36,5,0,100,'movex3','len',outExpo,2)
			me(41,25,-200,-200,'movex0','len',outExpo,1)
			me(41,25,-100,-100,'movex0','len',outExpo,2)
			me(41,25,-100,-100,'movex1','len',outExpo,1)
			me(41,25,100,100,'movex2','len',outExpo,1)
			me(41,25,200,200,'movex3','len',outExpo,1)
			me(41,25,100,100,'movex3','len',outExpo,2)
			me(50.5,1,0,300,'pulse','len',outExpo)
			me(51.5,1.5,360,0,'rotationz','len',outExpo)
			
			me(76,4,1080,0,'rotationy','len',outCubic)
			
			me(84,2,0,180,'rotationz','len',outExpo)
			me(84,2,0,-100,'mini','len',outExpo)
			me(86,2,-180,0,'rotationz','len',outExpo)
			me(86,2,-100,-50,'mini','len',outExpo)
			me(88,2,0,180,'rotationz','len',outExpo)
			me(88,2,-50,-100,'mini','len',outExpo)
			me(90,2,-180,0,'rotationz','len',outExpo)
			me(90,2,-100,0,'mini','len',outExpo)
			
			me(208,1,0,60,'rotationz','len',outCubic)
			me(209,1,60,-60,'rotationz','len',outCubic)
			me(210,1,-60,0,'rotationz','len',outCubic)
			me(208,1,360,0,'rotationy','len',outCubic)
			me(209,1,-360,0,'rotationy','len',outCubic)
			me(210,1,360,0,'rotationy','len',outCubic)
			
			m(291,5,'*-1 no parabolaz, no sudden, no hidden, no hiddenoffset, *1.25 no wave, *1.25 no tornado, *1.25 no rotationx, *1.25 no dark, *1.25 no confusionxoffset, *1.25 no centered, 3x','len',3)
			m(291,5,'*-1 no parabolaz, no sudden, no hidden, no hiddenoffset, *1.25 no wave, *1.25 no tornado,  *1.25 no rotationx, *1.25 no dark, *1.25 no confusionxoffset,*1.25 no centered, 3x','len',4)
			m(291,5,'*-1 no parabolaz, *-1 no drawsize','len')
			m(291,5,'*-1 no stealth','len',4)
			
			m(324,10,'*-1 hide, *-1 halgun, *-1 hidenoteflash','len',3)
			m(324,10,'*-1 hide, *-1 halgun, *-1 hidenoteflash','len',4)
			m(324,100,'*-1 no stealth, *1 no dark, *1 no hidenoteflash, *1 no halgun','len',1)
		    m(324,100,'*-1 no stealth, *1 no dark, *1 no hidenoteflash, *1 no halgun','len',2)
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
			if table.getn(mod_actions) > 1 then
                table.sort(mod_actions, modtable_compare)
            end
             
            self:queuecommand('Revo_NITGFanUpdate')
        end"
        
        Revo_NITGFanUpdateCommand="%function(self)
            local beat = GAMESTATE:GetSongBeat()
            self:sleep(0.0075)
            self:queuecommand('Revo_NITGFanUpdate')
        end"
		
		
		
		/>
	
</children></Layer>